#!/bin/bash

# === Formatting ===
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
CYAN="\033[0;36m"
BOLD="\033[1m"
NC="\033[0m"

# === Logo ===
function show_logo() {
    clear
    echo -e "${BOLD}${CYAN}"
    echo "LL        AAA   MM    MM PPPPPP  "
    echo "LL       AAAAA  MMM  MMM PP   PP "
    echo "LL      AA   AA MM MM MM PPPPPP  "
    echo "LL      AAAAAAA MM    MM PP      "
    echo "LLLLLLL AA   AA MM    MM PP      "
    echo -e "${NC}"
}

# === Services ===
SERVICES=("apache2" "mariadb" "php-fpm")
declare -A SERVICE_SHORTCUTS=(
    [ap]="apache2"
    [ma]="mariadb"
    [ph]="php-fpm"
)

# === Command shortcuts ===
declare -A CMD_SHORTCUTS=(
    [st]="start"
    [sp]="stop"
    [ss]="status"
    [op]="open"
    [cf]="config"
    [cu]="custom"
    [ba]="back"
    [ex]="exit"
)

# === Directories ===
declare -A SERVICE_DIRS=(
    [apache2]="/var/www/html"
    [mariadb]="/var/lib/mysql"
    [php-fpm]="/etc/php"
)

PHP_VER=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;' 2>/dev/null || echo "8.2")
declare -A SERVICE_CONFIGS=(
    [apache2]="/etc/apache2/apache2.conf"
    [mariadb]="/etc/mysql/my.cnf"
    [php-fpm]="/etc/php/${PHP_VER}/fpm/php.ini"
)

# === Dependency Check ===
function check_dependencies() {
    REQUIRED_PKGS=("apache2" "mariadb-server" "php" "xdg-utils")
    OPTIONAL_TOOLS=("gum" "fzf")
    MISSING=()

    for pkg in "${REQUIRED_PKGS[@]}"; do
        if ! dpkg -s "$pkg" &>/dev/null; then
            MISSING+=("$pkg")
        fi
    done

    if [ ${#MISSING[@]} -gt 0 ]; then
        echo -e "${RED}üö® Missing packages:${NC} ${MISSING[*]}"
        echo -e "${YELLOW}Installing...${NC}"
        sudo apt update
        sudo apt install -y "${MISSING[@]}"
    fi

    for tool in "${OPTIONAL_TOOLS[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Optional tool '$tool' not found. Install for enhanced UI.${NC}"
        fi
    done
}

# === Actions ===
function start_service() { echo -e "${CYAN}üöÄ Starting $1...${NC}"; sudo systemctl start "$1"; read -rp "Press enter to continue..."; }
function stop_service() {
    if gum confirm "üõë Are you sure you want to stop $1?"; then
        echo -e "${CYAN}üõë Stopping $1...${NC}"
        sudo systemctl stop "$1"
        read -rp "Press enter to continue..."
    fi
}
function status_service() { echo -e "${CYAN}üîç Status of $1:${NC}"; systemctl status "$1" --no-pager | grep -E "Active|Loaded"; read -rp "Press enter to continue..."; }
function open_web_root() {
    local path="${SERVICE_DIRS[$1]}"
    if [[ -d "$path" ]]; then
        echo -e "${GREEN}üìÇ Opening: $path${NC}"
        xdg-open "$path" &>/dev/null
    else
        echo -e "${YELLOW}‚ö†Ô∏è Directory not found. Enter a custom path:${NC}"
        path=$(gum input --placeholder="/your/custom/path")
        [ -d "$path" ] && xdg-open "$path"
    fi
    read -rp "Press enter to continue..."
}
function open_config_file() {
    local config="${SERVICE_CONFIGS[$1]}"
    if [ -f "$config" ]; then
        echo -e "${YELLOW}üìù Opening config: $config${NC}"
        xdg-open "$config" &>/dev/null
    else
        echo -e "${YELLOW}‚ö†Ô∏è Config not found. Enter custom config path:${NC}"
        config=$(gum input --placeholder="/etc/example.conf")
        [ -f "$config" ] && xdg-open "$config"
    fi
    read -rp "Press enter to continue..."
}

# === Menu: Select Service ===
function select_service() {
    show_logo
    local choice=""
    if command -v gum &>/dev/null; then
        choice=$(gum choose "apache2 (ap)" "mariadb (ma)" "php-fpm (ph)" "custom" "exit")
    elif command -v fzf &>/dev/null; then
        choice=$(printf "%s\n" "apache2 (ap)" "mariadb (ma)" "php-fpm (ph)" "custom" "exit" | fzf)
    else
        echo -e "${CYAN}üí° Available services:${NC}"
        select opt in "${SERVICES[@]}" "custom" "exit"; do
            choice=$opt
            break
        done
    fi

    case $choice in
        *apache2*) service_menu "apache2" ;;
        *mariadb*) service_menu "mariadb" ;;
        *php-fpm*) service_menu "php-fpm" ;;
        *custom*)
            custom=$(gum input --placeholder="Enter service name (e.g. nginx)")
            [[ -n "$custom" ]] && service_menu "$custom"
            ;;
        *exit*)
            if gum confirm "‚ùì Are you sure you want to exit?"; then
                echo -e "${GREEN}üëã Goodbye!${NC}"
                exit 0
            fi
            ;;
        *) echo -e "${RED}Invalid selection.${NC}" ;;
    esac
}

# === Menu: Service Actions ===
function service_menu() {
    local svc="$1"
    while true; do
        show_logo
        echo -e "\n${CYAN}üîß Managing: $svc${NC}"
        local options=("start (st)" "stop (sp)" "status (ss)" "open (op)" "config (cf)" "back (ba)" "exit (ex)")
        local cmd=""
        if command -v gum &>/dev/null; then
            cmd=$(printf "%s\n" "${options[@]}" | gum choose)
        elif command -v fzf &>/dev/null; then
            cmd=$(printf "%s\n" "${options[@]}" | fzf)
        else
            echo -e "${YELLOW}Choose a command:${NC}"
            select opt in "${options[@]}"; do
                cmd=$opt
                break
            done
        fi

        cmd=$(echo "$cmd" | awk '{print $1}')
        cmd="${CMD_SHORTCUTS[$cmd]:-$cmd}"

        case $cmd in
            start|stop|status|open|config)
                show_logo
                echo -e "\n${CYAN}üîß Managing: $svc${NC}"
                ${cmd}_service "$svc"
                ;;
            back) return ;;
            exit)
                if gum confirm "‚ùì Exit the program?"; then
                    echo -e "${GREEN}üëã Goodbye!${NC}"
                    exit 0
                fi
                ;;
            *) echo -e "${RED}‚ùå Unknown command${NC}" ;;
        esac
    done
}

# === Start Script ===
check_dependencies
while true; do
    select_service
done
