#!/bin/bash

# === Colors and formatting ===
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
CYAN="\033[0;36m"
BOLD="\033[1m"
NC="\033[0m"

# === Required LAMP packages ===
REQUIRED_PKGS=("apache2" "mariadb-server" "php" "xdg-utils")

# === Service directories ===
declare -A SERVICE_DIRS=(
    [apache2]="/var/www/html"
    [mariadb]="/var/lib/mysql"
    [php-fpm]="/etc/php"
)

# === Service config files ===
PHP_VER=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;' 2>/dev/null || echo "8.2")
declare -A SERVICE_CONFIGS=(
    [apache2]="/etc/apache2/apache2.conf"
    [mariadb]="/etc/mysql/my.cnf"
    [php-fpm]="/etc/php/${PHP_VER}/fpm/php.ini"
)

SERVICES=("apache2" "mariadb" "php-fpm")

function check_dependencies() {
    MISSING_PKGS=()
    for pkg in "${REQUIRED_PKGS[@]}"; do
        if ! dpkg -s "$pkg" &>/dev/null; then
            MISSING_PKGS+=("$pkg")
        fi
    done

    if [ ${#MISSING_PKGS[@]} -gt 0 ]; then
        echo -e "${RED}Missing packages: ${MISSING_PKGS[*]}${NC}"
        read -p "Would you like to install them now? [Y/n] " ans
        if [[ "$ans" =~ ^[Yy]$ || -z "$ans" ]]; then
            sudo apt update
            sudo apt install -y "${MISSING_PKGS[@]}"
        else
            echo -e "${YELLOW}Please install required packages manually before using the manager.${NC}"
            exit 1
        fi
    fi
}

function animated_banner() {
    echo -e "${BOLD}${CYAN}"
    echo "88        db    8b    d8 88""Yb"
    echo "88       dPYb   88b  d88 88__dP"
    echo "88  .o  dP__Yb  88YbdP88 88""' "
    echo "88ood8 dP""""Yb 88 YY 88 88    "
    echo -e "${NC}"
}

function draw_header() {
    clear
    animated_banner
    echo -e "${BLUE}--- Service Status ---${NC}"
    for svc in "${SERVICES[@]}"; do
        if systemctl list-units --type=service | grep -q "$svc"; then
            status=$(systemctl is-active "$svc" 2>/dev/null)
            case "$status" in
                active) echo -e "${GREEN}✔ $svc is running${NC}" ;;
                inactive) echo -e "${YELLOW}⚠ $svc is stopped${NC}" ;;
                failed) echo -e "${RED}✖ $svc has failed${NC}" ;;
                *) echo -e "${RED}❓ $svc status unknown${NC}" ;;
            esac
        else
            echo -e "${RED}✖ $svc not installed${NC}"
        fi
    done
    echo ""
}

function monitor_loop() {
    svc="$1"
    echo -e "${YELLOW}Monitoring $svc... Press Ctrl+C to exit${NC}"
    while true; do
        if ! systemctl is-active --quiet "$svc"; then
            echo -e "${RED}❌ $svc is down. Restarting...${NC}"
            sudo systemctl restart "$svc"
            echo -e "${GREEN}✅ Restarted $svc${NC}"
        else
            echo -e "${GREEN}✔ $svc is running${NC}"
        fi
        sleep 5
    done
}

function service_actions() {
    local selected_service="$1"
    while true; do
        draw_header
        echo -e "${BLUE}== $selected_service: Choose an action ==${NC}"
        options=("Start" "Stop" "Restart" "Status" "Monitor loop" "Open directory" "Edit config file" "Back")
        select action in "${options[@]}"; do
            case "$action" in
                Start) sudo systemctl start "$selected_service"; break ;;
                Stop) sudo systemctl stop "$selected_service"; break ;;
                Restart) sudo systemctl restart "$selected_service"; break ;;
                Status) systemctl status "$selected_service"; read -p "Press Enter to continue..."; break ;;
                "Monitor loop") monitor_loop "$selected_service"; break ;;
                "Open directory")
                    dir="${SERVICE_DIRS[$selected_service]}"
                if [[ -d "$dir" ]]; then
			xdg-open "$dir" &
		else
    			echo -e "${RED}Directory not found.${NC}"
		fi
                    sleep 2; break ;;
                "Edit config file")
                    config="${SERVICE_CONFIGS[$selected_service]}"
                if [[ -f "$config" ]]; then
    			xdg-open "$config" &
    		else
    			echo -e "${RED}Config not found.${NC}"
		fi

                    sleep 2; break ;;
                Back) return ;;
                *) echo -e "${RED}Invalid choice.${NC}" ;;
            esac
        done
    done
}

function manage_service() {
    while true; do
        draw_header
        echo -e "${BLUE}== Select a service to manage ==${NC}"
        select svc in "${SERVICES[@]}" "Back"; do
            if [[ "$REPLY" -le "${#SERVICES[@]}" ]]; then
                service_actions "$svc"
                break
            elif [[ "$REPLY" == $(( ${#SERVICES[@]} + 1 )) ]]; then
                return
            else
                echo -e "${RED}Invalid selection.${NC}"
                sleep 1
                break
            fi
        done
    done
}

# === MAIN ===
check_dependencies

while true; do
    draw_header
    echo -e "${CYAN}Options:${NC}"
    select opt in "Manage a service" "Refresh status" "Exit"; do
        case "$opt" in
            "Manage a service") manage_service; break ;;
            "Refresh status") break ;;
            "Exit") echo -e "${YELLOW}Bye!${NC}"; exit ;;
            *) echo -e "${RED}Invalid choice.${NC}"; sleep 1; break ;;
        esac
    done
done
